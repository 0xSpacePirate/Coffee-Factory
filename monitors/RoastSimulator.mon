
event ColorTrack{
	float currentBeanVolt;
}

event DrumTemperature{
	float currentDrumTemperature;
}

/** This monitor is responsible for simulating the data and sending it to RoastDrum.mon  */

monitor RoastDrumSimulator {

	integer beanIllustrator := 1; //parses the number so the program can display the actual color of the bean in a range from 1 to 100; Where 1 is green and very black is 100;
	integer currentBeanTemp := 0; // average temp;

	float currentDrumTemp := preheatDrum(); // default temp in drum before roasting is just below 200, e.g. 190;
	float currentBeanVolt := BeanColorVolt.MAXIMUM; 
	
	integer alertType := 0;
		
	listener listenHeatDrum;
	listener listenColorTrack;
	
	action onload() {
		log Message.LOADED_ROAST_SIMULATOR at INFO;
		initialize();
	}

	action initialize(){
			heatDrum();
			colorTrack();
	}
	
	/** 
		@return a number representing the initial value of the temperature within the drum;
	*/
	action preheatDrum() returns float{
		return (Temperature.PREHEAT_NUMBER).rand() + BeanTemp.PALE;
	}
	
	/** 
		Listens and increases the temperate of the roast drum gradually, 
		stops either when a high roast drum temperature alert is send or
		when the color of the beans becomes way to extremely dark ~0.0;
	
		For more information about bean color @see colorTrack() action
		within this monitor;
	*/
	action heatDrum(){		
		listenHeatDrum := on all wait (2.0){
				float randomTemp := (BeanRandom.TEMP_INCREMENTER).rand();				
				currentDrumTemp := (currentDrumTemp + randomTemp);
				listenForAlerts();
				send DrumTemperature(currentDrumTemp) to Channel.ROAST;
		}
	}
	
	/** 
		Listens and decreases the volts DC gradually,
		stops either when the temperate in the roast drum
		is way too high or when the volts DC reach ~0.0 = way to extremely dark;
	
		Using a ColorTrack RT module device we detect the bean color,
		the output coming from the laser module is expressed in a 0-10 Volt DC signal
		(which in our case is multiplied by 10 just because working with numbers 0-100
		looks better on Grafana, therefore 0-100) 
	
		Maximum = 100 (green beans);
		Minimum = 0 (extremely dark beans);
		
	*/
	action colorTrack(){
		listenColorTrack := on all wait (1.0){
				float randomVoltIncrease := (BeanTracker.COLOR_CHANGER).rand(); //the beans spin while in the drum, therefore their temperature might differ slightly.
				float gate := (BeanRandom.GATE_BOUND).rand();
				integer beanColorIllustrator := getBeanIllustrator(currentBeanVolt);
				listenForAlerts();
				implementBeanVolt(gate, randomVoltIncrease);	
				send ColorTrack(currentBeanVolt) to Channel.ROAST;
		}
	}
	
	/** 
		@param gate used to help simulate the data by generating a random number which
		if it's within @see BeanTracker.Color_GATE_ENTRY bounds will increase the value of the volts on the graph;
	
		@param randomVoltIncrease increasing the value of the volt slightly,
		used to simulate that the beans are not all evently roasted and there
		are slight differences since the beans are spinning within a roast drum;
	*/
	action implementBeanVolt(float gate, float randomVoltIncrease){
		if gate <= BeanTracker.COLOR_GATE_ENTRY {
			currentBeanVolt := currentBeanVolt + randomVoltIncrease;
		}else{
			currentBeanVolt := currentBeanVolt - BeanTracker.COLOR_CHANGER; // 0-100 Volts DC; 280 maximum temp in drum -> 280/100 = 2.8; Therefore, 2.8 decrease per degree celsius;
		}
	}
	
	/** 
		@param beanVolt value is used to represent what the current color of the beans is;
	
		@return a formula value: the color scheme graph contains half the range the beanvolt has
		(i.e. BeanVolt starts at 100 and goes down to 0, colorScheme starts at 0 and goes up to 50).
		Hence, get half of bean volt and remove 50 since the colorScheme operates in the 0-50 range;
	*/
	action getBeanIllustrator(float beanVolt) returns integer {
		return (getHalf(beanVolt) - ColorScheme.SIZE).abs(); 
	}
	
	/** 
		@return half the value of a number;
	*/
	action getHalf(float value) returns integer{
		return value.floor() / Divider.BY_HALF;
	}
	
	/** 
		Used to call all actions that check for specific alerts;
	*/
	action listenForAlerts(){
		monitor.subscribe(Channel.ROAST_SIMULATOR); // Channel on which we listen for alerts;
		checkRoastDrumHeatIfTooHigh();
		checkColorTrackerIfTooLow();
	}
		
	action checkRoastDrumHeatIfTooHigh(){
		on all Alert(anAlert=AlertType.HIGH_ROAST_DRUM_HEAT){
			reset();
		}
	}
	
	action checkColorTrackerIfTooLow(){
		on all Alert(anAlert=AlertType.COLOR_TRACKER_TOO_LOW){
			reset();
		}
	}

	action reset(){
		stopListeners();
		on wait(1.0){
			resetRoastStageVariables();
			sendResettedValues();
		}
		startOver();
	}
	
	action sendResettedValues(){
		send DrumTemperature(currentDrumTemp) to Channel.ROAST;
		send ColorTrack(currentBeanVolt) to Channel.ROAST;
	}
	
	/** 
		Used to simulate that the drum is emptied and new beans are going in with an initial temperature;
	*/
	action startOver(){
		heatDrum();
		colorTrack();
	}
	
	action resetRoastStageVariables(){
		currentDrumTemp := preheatDrum();
		currentBeanVolt := BeanColorVolt.MAXIMUM;
	}
	
	action stopListeners(){
		listenHeatDrum.quit();
		listenColorTrack.quit();
	}
	
	
	
	
}
 