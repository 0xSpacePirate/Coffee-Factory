using com.apama.correlator.Component;

/** This monitor is responsible for sending data to Prometheus and
	for checking if there are any issues with the data  */

monitor Extractor {
	
	float currentCaffeine := 1.0;
	float currentVolatileOils := 3.0;
	float currentOrganicAcids := 8.0;
	float currentTemp := 0.0;
		
	action onload() {
		log Message.LOADED_EXTRACT at INFO;
		initialize();
	}

	action initialize(){
		updateVariables();
		implementExtractorTemp();
		extractAll();
	}
	
	action updateVariables(){
		monitor.subscribe(Channel.EXTRACTOR); // Channel on which we listen;
		updateCaffeine();
		updateVolatileOils();
		updateOrganicAcids();
		updateExtractorTemperature();
	}
	
	action extractAll(){
		listener listen := on all wait (1.0){
			extractCaffeine();
			extractVolatileOils();
			extractOrganicAcids();
		}
	}

	action extractCaffeine(){
		Component.setUserStatus(UserStatus.CAFFEINE, currentCaffeine.toString()); // sends data to Prometheus;
	}

	action extractVolatileOils(){
		Component.setUserStatus(UserStatus.VOLATILE_OILS, currentVolatileOils.toString()); // sends data to Prometheus;
	}
	
	action extractOrganicAcids(){
		Component.setUserStatus(UserStatus.ORGANIC_ACIDS, currentOrganicAcids.toString()); // sends data to Prometheus;
	}
	
	/** 
		Increases/decreases the temperature in the extractor drum;
	*/
	action implementExtractorTemp(){
		listener listen := on all wait (2.0){
			checkIfTempTooHigh();
			Component.setUserStatus(UserStatus.EXTRACTOR_TEMP, currentTemp.toString());
		}
	}

	action checkIfTempTooHigh(){
		if currentTemp >= Temperature.IMMINENT_FIRE{
			send Alert(AlertType.HIGH_EXTRACTION_DRUM_HEAT) to Channel.EXTRACTOR_SIMULATOR;
		}
	}

	action updateCaffeine(){
		on all CaffeineEvent() as ce{
			currentCaffeine := ce.currentCaffeine;
			log "Caffeine = " + currentCaffeine.toString() at INFO;
		}
	}
	
	action updateVolatileOils(){
		on all VolatileOilsEvent() as voe{
			currentVolatileOils := voe.currentVolatileOils;
			log "VolatileOilsEvent = " + currentVolatileOils.toString() at INFO;
		}
	}
	
	action updateOrganicAcids(){
		on all OrganicAcidsEvent() as oae{
			currentOrganicAcids := oae.currentOrganicAcids;
			log "OrganicAcidsEvent = " + currentOrganicAcids.toString() at INFO;
		}
	}
	
	action updateExtractorTemperature(){
		on all ExtractorTemperature() as et{
			currentTemp := et.currentTemperature;
			log "ExtractorTemperature = " + currentTemp.toString() at INFO;
		}
	}
}


