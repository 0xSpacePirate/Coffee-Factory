using com.apama.correlator.Component;

/** This monitor is responsible for ...  */

event CaffeineEvent{
	float currentCaffeine;
}

event VolatileOilsEvent{
	float currentVolatileOils;
}

event OrganicAcidsEvent{
	float currentOrganicAcids;
}

event ExtractorTemperature{
	float currentTemperature;
}

monitor Extractor {
	
	float currentCaffeine := 1.0;
	float currentVolatileOils := 3.0;
	float currentOrganicAcids := 8.0;
	float currentTemp := preheatExtractor();
	float currentCoffeeToWaterRatio := 0.0;
	
	boolean highExtractionTemp := false; // used as a gate to decrease the temp;
	boolean lowExtractionTemp := true; // used as a gate to increase the temp;
	
	float caffeineTimeCounter := 0.0;
	float oilsTimeCounter := 0.0;
	float acidsTimeCounter := 0.0;
	
	//Side value => Amount of compound (Unit) - A
	
	action onload() {
		log Message.LOADED_EXTRACT at INFO;
		initialize();
	}

	action initialize(){
		updateVariables();
		implementExtractorTemp();
		extractAll();
	}
	
	action updateVariables(){
		monitor.subscribe(Channel.EXTRACTOR);
		updateCaffeine();
		updateVolatileOils();
		updateOrganicAcids();
	}
	
	action updateCaffeine(){
		on all CaffeineEvent() as ce{
			currentCaffeine := ce.currentCaffeine;

		}
	}
	
	action updateVolatileOils(){
		on all VolatileOilsEvent() as voe{
			currentVolatileOils := voe.currentVolatileOils;

		}
	}
	
	action updateOrganicAcids(){
		on all OrganicAcidsEvent() as oae{
			currentOrganicAcids := oae.currentOrganicAcids;
		}
	}

	action extractAll(){
		extractCaffeine();
		extractVolatileOils();
		extractOrganicAcids();
	}

	/** 
	...
	*/
	action extractCaffeine(){
		listener listen := on all wait (Delay.ONE_SECOND){
			
			//if statements here .....
			
			Component.setUserStatus(UserStatus.CAFFEINE, currentCaffeine.toString());
		}
	}

	/** 
	...
	*/
	action extractVolatileOils(){
		listener listen := on all wait (Delay.ONE_SECOND){		

//			if statements here .....
			
			Component.setUserStatus(UserStatus.VOLATILE_OILS, currentVolatileOils.toString());
		}
	}
	
	/** 
	...
	*/	
	action extractOrganicAcids(){
		listener listen := on all wait (Delay.ONE_SECOND){

//			if statements here .....
			
			Component.setUserStatus(UserStatus.ORGANIC_ACIDS, currentOrganicAcids.toString());
		}
	}
	
	/** 
		Increases/decreases the temperature in the extractor drum;
		
	*/
	action implementExtractorTemp(){
		listener listen := on all wait (Delay.TWO_SECONDS){
			//float randomTempIncrementor := (2.0).rand(); // TODO FIX MAGIC NUMBER;
			if checkTempIfTooHigh() {
				//randomTempIncrementor := -randomTempIncrementor;
			}
			Component.setUserStatus(UserStatus.EXTRACTOR_TEMP, currentTemp.toString());
		}
	}
	
	/** 
	@param time = the time that has passed in seconds;
	@param height = increase value for higher function and decrease for lower; 7.7 is a random default value;
	@param length = increase to shrink function, decrease to expand function; 0.188 is a random default value;
	@return Max Planck's formula for Black-body radition
	*/
	action blackBodyFormula(float time, float height, float length) returns float{
		return (height * (length * time).pow(Math.CUBED)) / ( (float.E).pow(length * time) - Math.PLANCK_FORMULA_SUBTRACTOR);
	}
	
	/** 
	...
	*/
	action updateCoffeeToWaterRatio(){	
		Component.setUserStatus(UserStatus.COFFEE_TO_WATER_RATIO, currentCoffeeToWaterRatio.toString());
		//....
	}
	
	action preheatExtractor() returns float{
		return (Temperature.EXTRACTOR_PREHEAT).rand() + Temperature.EXTRACTOR_INITIAL;
	}
	
	/** 
	@return ...
	*/
	action checkTempIfTooHigh() returns boolean{
		if currentTemp >= Temperature.IMMINENT_FIRE {
			lowExtractionTemp := false;
			highExtractionTemp := true;	
		}
		return highExtractionTemp;
	}
	
	/** 
	@return ...
	*/
	action checkTempIfTooLow() returns boolean{
		if currentTemp = Temperature.DRUM_MINIMUM {
			lowExtractionTemp := true;
			highExtractionTemp := false;
		}
		return lowExtractionTemp;
	}
	
}


