using com.apama.correlator.Component;

/** This monitor is responsible for ...  */

monitor Extractor {
	
	float currentCaffeine := 1.0;
	float currentVolatileOils := 3.0;
	float currentOrganicAcids := 8.0;
	float currentTemp := 0.0;
	float currentCoffeeToWaterRatio := 0.0;
	
	boolean highExtractionTemp := false; // used as a gate to decrease the temp;
	boolean lowExtractionTemp := true; // used as a gate to increase the temp;
	
	float caffeineTimeCounter := 0.0;
	float oilsTimeCounter := 0.0;
	float acidsTimeCounter := 0.0;
		
	action onload() {
		log Message.LOADED_EXTRACT at INFO;
		initialize();
	}

	action initialize(){
		updateVariables();
		implementExtractorTemp();
		extractAll();
	}
	
	action updateVariables(){
		monitor.subscribe(Channel.EXTRACTOR);
		updateCaffeine();
		updateVolatileOils();
		updateOrganicAcids();
		updateExtractorTemperature();
	}
	
	action extractAll(){
		listener listen := on all wait (1.0){
			extractCaffeine();
			extractVolatileOils();
			extractOrganicAcids();
		}
	}

	action extractCaffeine(){
		Component.setUserStatus(UserStatus.CAFFEINE, currentCaffeine.toString());
	}

	action extractVolatileOils(){
		Component.setUserStatus(UserStatus.VOLATILE_OILS, currentVolatileOils.toString());
	}
	
	action extractOrganicAcids(){
		Component.setUserStatus(UserStatus.ORGANIC_ACIDS, currentOrganicAcids.toString());
	}
	
	/** 
		Increases/decreases the temperature in the extractor drum;
	*/
	action implementExtractorTemp(){
		listener listen := on all wait (2.0){
			listenForProblems();
			Component.setUserStatus(UserStatus.EXTRACTOR_TEMP, currentTemp.toString());
		}
	}

	/** 
	@param time = the time that has passed in seconds;
	@param height = increase value for higher function and decrease for lower; 7.7 is a random default value;
	@param length = increase to shrink function, decrease to expand function; 0.188 is a random default value;
	@return Max Planck's formula for Black-body radition
	*/
	action blackBodyFormula(float time, float height, float length) returns float{
		return (height * (length * time).pow(Math.CUBED)) / ( (float.E).pow(length * time) - Math.PLANCK_FORMULA_SUBTRACTOR);
	}

	action listenForProblems(){
		if currentTemp >= Temperature.IMMINENT_FIRE{
			log "Listen for problems ==== " at INFO;
			send Alert(AlertType.HIGH_EXTRACTION_DRUM_HEAT) to Channel.EXTRACTOR_SIMULATOR;
		}
	}

	action updateCaffeine(){
		on all CaffeineEvent() as ce{
			currentCaffeine := ce.currentCaffeine;
			log "CAFFEINE = " + currentCaffeine.toString() at INFO;
		}
	}
	
	action updateVolatileOils(){
		on all VolatileOilsEvent() as voe{
			currentVolatileOils := voe.currentVolatileOils;
			log "VolatileOilsEvent = " + currentVolatileOils.toString() at INFO;
		}
	}
	
	action updateOrganicAcids(){
		on all OrganicAcidsEvent() as oae{
			currentOrganicAcids := oae.currentOrganicAcids;
			log "OrganicAcidsEvent = " + currentOrganicAcids.toString() at INFO;
		}
	}
	
	action updateExtractorTemperature(){
		on all ExtractorTemperature() as et{
			currentTemp := et.currentTemperature;
			log "ExtractorTemperature = " + currentTemp.toString() at INFO;
		}
	}
}


