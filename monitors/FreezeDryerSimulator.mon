
/** This monitor is responsible for simulating the data for the Freezer Dryer*/

event FreezerDryerMoisture{
	float currentMoisture;
}

event FreezerDryerTemp{
	float currentTemp;
}

event FreezerDryerVacuum{
	float currentVacuum;
}

event Alert{
	integer anAlert;
}

event BadEvent{
	float temperatureIncrease;
}

monitor FreezeDryerSimulator {

	float currentMoisture := 100.0;
	float currentTemp := 60.0;
	float currentVacuum := 150.0;
		
	listener moistureListener;
	listener tubeTempListener;
	listener vacuumPressureListener;
	
	
	
	action onload() {
		initialize();
	}

	action initialize(){
		log Message.LOADED_FREEZE_DRYER_SIMULATOR at INFO;
		moistureEvaporating();
		implementTubeTemperature();
		implementTubeVacuum();
		listenForAlerts();
	}
	
	/** 
		Decreases the moisture of the already powdered coffee beans. The moisture is displayed on Grafana;
	*/
	action moistureEvaporating(){
		moistureListener := on all wait (2.0){
			float random := (FreezerDryer.RANDOM_FLUCTUATION_NUMBER).rand();
			currentMoisture := currentMoisture - random;
			send FreezerDryerMoisture(currentMoisture) to Channel.FREEZE_DRYER;
		}
	}
	
	/** 
		Displays the temperature in the tube. The temperature value fluctuates constantly so 
		it looks way more realistic that is why you can find the random variable in the action;
	
		The random variable, shouldn't be more than 1.1 and less than 0.9; Otherwise the values will not follow
		the instant coffee making rules related to the temperature; 
	*/
	action implementTubeTemperature(){
		tubeTempListener := on all wait (3.0){
			float random := (1.0).rand();  		// random number, should'nt be more than 1.2 and less than 0.8;
										  		//Otherwise the values will not follow the instant coffee making rules related to the temperature;
			
			float tempGate := (1.0).rand(); 	// used to either increase or decrease the value, depending
												//on its value and the FreezerDryer fluctuation threshold;	
			currentTemp := implementFluctuation(tempGate, currentTemp, random);
			send FreezerDryerTemp(currentTemp) to Channel.FREEZE_DRYER;
		}
	}
	
	/** 
		Displays the vacuum pressure within the tube. The value fluctuates constantly using the random variable;
	
		The random variable, shouldn't be more than 1.1 and less than 0.9; Otherwise the values will not follow
		the instant coffee making rules related to the temperature; 
	*/
	action implementTubeVacuum(){
		vacuumPressureListener := on all wait (2.0){
			float random := (1.0).rand();  		//Used to generate a random number which will be later on
												//added or deducted from the currentValue; The point is to create a more realistic graphs;
			
			float vacuumGate := (1.0).rand(); 	// used to either increase or decrease the value, depending
												//on its value and the FreezerDryer fluctuation threshold;	
			currentVacuum := implementFluctuation(vacuumGate, currentVacuum, random);
			send FreezerDryerVacuum(currentVacuum) to Channel.FREEZE_DRYER;
		}
	}
	
	action listenForAlerts(){
		monitor.subscribe(Channel.FREEZE_DRYER_SIMULATOR);
		listenToMoisture();
		listenToTube();
		listenForBadEvents();
		listenToStabilizer();
	}
	
	action listenToMoisture(){
		on all Alert(anAlert=AlertType.MINIMUM_MOISTURE_REACHED){
			reset();
		}
	}
	
	action listenToTube(){
		on all Alert(anAlert=AlertType.HIGH_TUBE_HEAT){
			reset();
		}
	}
	
	/** 
		Listens to the temp of the FreezerDryerTemp which if goes above a certain threshold is updated;
	*/
	action listenToStabilizer(){
		on all FreezerDryerTemp() as fdt{
			currentTemp := fdt.currentTemp;
		}
	}
	
	action listenForBadEvents(){
		on all BadEvent() as be{
			currentTemp := currentTemp + be.temperatureIncrease;
		}
	}
	
	action reset(){
		stopListeners();
		on wait(1.0){
			resetFreezerDryerVariables();
			sendResettedValues();
		}
		startOver();
	}
	
	action sendResettedValues(){
		send FreezerDryerMoisture(currentMoisture) to Channel.FREEZE_DRYER;
		send FreezerDryerTemp(currentTemp) to Channel.FREEZE_DRYER;
		send FreezerDryerVacuum(currentVacuum) to Channel.FREEZE_DRYER;		
	}
	
	action startOver(){
		moistureEvaporating();
		implementTubeTemperature();
		implementTubeVacuum();
	}
	
	action resetFreezerDryerVariables(){
		currentMoisture := FreezerDryer.MOISTURE_DEFAULT_VALUE;
		currentTemp := FreezerDryer.TUBE_TEMP_DEFAULT_VALUE;
		currentVacuum := FreezerDryer.VACUUM_PRESSURE_DEFAULT_VALUE;
	}

	action stopListeners(){
		moistureListener.quit();
		tubeTempListener.quit();
		vacuumPressureListener.quit();
	}
	
	/** 
		@param gate used to help simulate the data by generating a random number which
		will increase the value of the volts on the graph with about 50-50 percent
		chance of increasing or decreasing the value;
	
		@param curretValue represents the currentValue of the passed variable which will be update;
		@param randomNumber the amount which will be added or subtracted;
	
		@returns the updated @param currentValue
	*/
	action implementFluctuation(float gate, float currentValue, float randomNumber) returns float{
		if gate <= FreezerDryer.FLUCTUATION_THRESHOLD {
			currentValue := currentValue - randomNumber;
		}else{
			currentValue := currentValue + randomNumber;
		}
		return currentValue;
	}
	
}
