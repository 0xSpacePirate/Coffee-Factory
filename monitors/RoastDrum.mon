using com.apama.correlator.Component;

event ColorTrack{
	float currentBeanVolt;
}

event DrumTemperature{
	float currentDrumTemperature;
}

event Alert{
	integer anAlert;
}


monitor RoastDrum {
	
	integer beanIllustrator := 1; //parses the number so the program can display the actual color of the bean in a range from 1 to 100; Where 1 is green and very black is 100;
	integer currentBeanTemp := 0; // average temp;

	float currentDrumTemp; // default temp in drum before roasting is just below 200, e.g. 190;
	float currentBeanVolt := BeanColorVolt.MAXIMUM; 
	
	action onload() {
		log Message.LOADED_ROAST at INFO;
		initialize();
	}

	action initialize(){
		updateVariables();
		heatDrum();
		colorTrack();
	}
		
	/** 
		...
	*/
	action heatDrum(){		
		listener listen := on all wait (2.0){
			float randomTemp := (BeanRandom.TEMP_INCREMENTER).rand();	
			if currentDrumTemp >= Temperature.IMMINENT_FIRE{
				resetDueToHighHeat();
			}				
			Component.setUserStatus(UserStatus.DRUM, currentDrumTemp.toString());			
		}
	}	

	
	/** 
	@return ...
	*/
	action resetDueToHighHeat(){
		send Alert(AlertType.HIGH_ROAST_DRUM_HEAT) to Channel.ROAST_SIMULATOR;
	}
		
	/** 
		....
	*/
	action colorTrack(){		
		listener listen := on all wait (1.0){
			float randomVoltIncrease := (BeanTracker.COLOR_CHANGER).rand(); // the beans spin while in the drum, therefore their temperature might differ slightly. Plus, making the graph more realistic;
			float gate := (BeanRandom.GATE_BOUND).rand();
			integer beanColorIllustrator := getBeanIllustrator(currentBeanVolt);
			if currentBeanVolt <= BeanColorVolt.MINIMUM {
				//listen.quit();
			}
			Component.setUserStatus(UserStatus.BEAN_COLOR, currentBeanVolt.toString());
			Component.setUserStatus(UserStatus.BEAN_ILLUSTRATOR, beanColorIllustrator.toString());
			
			
		}
	}
	
	action updateVariables(){
		monitor.subscribe(Channel.ROAST);
		updateTemp();
		updateColorTrack();
	}
	
	action updateTemp(){
		on all DrumTemperature() as dt{
			currentDrumTemp := dt.currentDrumTemperature;
		}
	}
	
	action updateColorTrack(){
		on all ColorTrack() as ct{
			currentBeanVolt := ct.currentBeanVolt;
		}
	}
	
	/** 
	@param beanVolt ...
	@return ....
		formula: the color scheme graph contains half the range the beanvolt has
		(i.e. BeanVolt starts at 100 and goes down to 0, colorScheme starts at 0 and goes up to 50).
		Hence, get half of bean volt and remove 50 since the colorScheme operates in the 0-50 range;
	*/
	action getBeanIllustrator(float beanVolt) returns integer {
		return (getHalf(beanVolt) - ColorScheme.SIZE).abs(); 
	}
	
	action getHalf(float value) returns integer{
		return value.floor() / Divider.BY_HALF;
	}
	
	action sendRoastAlert(){
		//send Alert("1") to Channel.ROAST_SIMULATOR;
	}
	
}
