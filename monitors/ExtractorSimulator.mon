
/** This monitor is responsible for simulating the extractor data  */

event CaffeineEvent{
	float currentCaffeine;
}

event VolatileOilsEvent{
	float currentVolatileOils;
}

event OrganicAcidsEvent{
	float currentOrganicAcids;
}

event ExtractorTemperature{
	float currentTemperature;
}

monitor ExtractorSimulator {

	float currentCaffeine := 1.0;
	float currentVolatileOils := 3.0;
	float currentOrganicAcids := 8.0;
	float currentTemp := preheatExtractor();
	float currentCoffeeToWaterRatio := 0.0;
	
	boolean highExtractionTemp := false; // used as a gate to decrease the temp;
	boolean lowExtractionTemp := true; // used as a gate to increase the temp;
	
	float timeCounterSecs := 0.0;
	
	//============================================
	//randomly selected numbers, used to create diversity,
	//making the graphs always with a different height/length from before;
	float caffeineGraphHeightRandom := (1.5).rand();
	float caffeineGraphLengthRandom := (0.030).rand();
	
	float oilsGraphHeightRandom := (0.7).rand();
	float oilsGraphLengthRandom := (0.0090).rand();
	
	float acidsGraphHeightRandom := (0.2).rand();
	float acidsGraphLengthRandom := (0.0027).rand();
	// ============================================
	
	listener extractsListener;
	listener temperatureListener;
	
	action onload() {
		log Message.LOADED_EXTRACT_SIMULATOR at INFO;
		initialize();
	}

	action initialize(){
		listenForAlerts();
		implementExtractorTemp();
		extractAll();
	}

	action extractAll(){
		extractsListener := on all wait (1.0){
			extractCaffeine();
			extractVolatileOils();
			extractOrganicAcids();
			timeCounterSecs := timeCounterSecs + 1.0; // add a second;
		}
	}

	/** 
		Updates the value of caffeine on Grafana;
	*/
	action extractCaffeine(){
		currentCaffeine := blackBodyFormula(timeCounterSecs, getCaffeineGraphHeight(), getCaffeineGraphLength());  
		send CaffeineEvent(currentCaffeine) to Channel.EXTRACTOR; 
	}
	
	/** 
		Updates the value of volatile oils on Grafana;
	*/
	action extractVolatileOils(){
		currentVolatileOils := blackBodyFormula(timeCounterSecs, getVolatileOilsGraphHeight(), getVolatileOilsGraphLength());	
		send VolatileOilsEvent(currentVolatileOils) to Channel.EXTRACTOR; 
	}
	
	/** 
		Updates the value of organic acids on Grafana;
	*/
	action extractOrganicAcids(){
		currentOrganicAcids := blackBodyFormula(timeCounterSecs, getOrganicAcidsGraphHeight(), getOrganicAcidsLenght()); 
		send OrganicAcidsEvent(currentOrganicAcids) to Channel.EXTRACTOR; 
	}
	
	/** 
		Updates the temperature in the extractor drum;
	*/
	action implementExtractorTemp(){
		temperatureListener := on all wait (2.0){
			float randomTempIncrementor := (2.0).rand(); // TODO FIX MAGIC NUMBER;
			currentTemp := currentTemp + randomTempIncrementor;
			send ExtractorTemperature(currentTemp) to Channel.EXTRACTOR; 
		}
	}
	
	action listenForAlerts(){
		monitor.subscribe(Channel.EXTRACTOR_SIMULATOR);
		listenForExtractionDrumTemp();
	}
	
	action listenForExtractionDrumTemp(){
		on all Alert(anAlert=AlertType.HIGH_EXTRACTION_DRUM_HEAT){
			reset();
		}
	}
	
	action reset(){
		stopListeners();
		on wait(1.0){
			resetExtractStageVariables();
			send CaffeineEvent(currentCaffeine) to Channel.EXTRACTOR;
			send VolatileOilsEvent(currentVolatileOils) to Channel.EXTRACTOR;
			send OrganicAcidsEvent(currentOrganicAcids) to Channel.EXTRACTOR;
			send ExtractorTemperature(currentTemp) to Channel.EXTRACTOR;
		}
		startOver();
	}
	
	/** 
		Used to simulate that new beans are going into the extractor drum;
	*/
	action startOver(){
		extractAll();
		implementExtractorTemp();
	}
	
	action resetExtractStageVariables(){
		currentCaffeine := 1.0;
		currentVolatileOils := 3.0;
		currentOrganicAcids := 8.0;
		timeCounterSecs := 0.0;
		currentTemp := preheatExtractor();
	}
	
	action stopListeners(){
		extractsListener.quit();
		temperatureListener.quit();
	}
	
	/** 
	@param time = the time that has passed in seconds;
	@param height = increase value for higher function and decrease for lower; 7.7 is a random default value;
	@param length = increase to shrink function, decrease to expand function; 0.188 is a random default value;
	@return Max Planck's formula for Black-body radition, used because it produces good looking functions on Grafana;
	*/
	action blackBodyFormula(float time, float height, float length) returns float{
		return (height * (length * time).pow(3.0)) / ( (float.E).pow(length * time) - Math.PLANCK_FORMULA_SUBTRACTOR);
	}
	
	/** 
		Initializes the initial temperature in the extractor drum;
		Adding a random number is used to make the initial value different each time;
	*/
	action preheatExtractor() returns float{
		return (Temperature.EXTRACTOR_PREHEAT).rand() + Temperature.EXTRACTOR_INITIAL;
	}
	
	action getCaffeineGraphHeight() returns float{
		return Caffeine.GRAPH_HEIGHT - caffeineGraphHeightRandom; 
	}
	
	action getCaffeineGraphLength() returns float{
		return Caffeine.GRAPH_LENGTH - caffeineGraphLengthRandom; 
	}
	
	action getVolatileOilsGraphHeight() returns float{
		return VolatileOils.GRAPH_HEIGHT - oilsGraphHeightRandom; 
	}
	
	action getVolatileOilsGraphLength() returns float{
		return VolatileOils.GRAPH_LENGTH - oilsGraphLengthRandom; 
	}
	
	action getOrganicAcidsGraphHeight() returns float{
		return OrganicAcids.GRAPH_HEIGHT - acidsGraphHeightRandom; 
	}
	
	action getOrganicAcidsLenght() returns float{
		return OrganicAcids.GRAPH_LENGTH - acidsGraphLengthRandom; 
	}
	
}
