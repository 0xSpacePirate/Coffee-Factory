using com.apama.correlator.Component;

/** This monitor is responsible for sending data to Prometheus and
	for checking if there are any issues with the data per se */

monitor FreezeDryer {
	
	float currentMoisture := 0.0;
	float currentVacuum := 0.0;
	float currentTemp := 0.0;
	
	action onload() {
		log Message.LOADED_FREEZE_DRYER at INFO;
		initialize();
	}

	action initialize(){
		updateVariables();
		freezeDry();
	}
		
	action freezeDry(){
		listener listen := on all wait (1.0){
			listenForProblems();
			implementMoisture();
			implementPressure();
			implementTemperature();
			stabilize();
		}
	}
	
	action implementMoisture(){
		Component.setUserStatus(UserStatus.MOISTURE, currentMoisture.toString()); // send moisture data to Prometheus;
	}
	
	action implementPressure(){
		Component.setUserStatus(UserStatus.VACUUM, currentVacuum.toString()); // send vacuum pressure data to Prometheus;
	}
	
	action implementTemperature(){
		Component.setUserStatus(UserStatus.FREEZER_DRYER_TEMP, currentTemp.toString());// send temperature data to Prometheus;
	}
	
	action updateVariables(){
		monitor.subscribe(Channel.FREEZE_DRYER);
		updateTemp();
		updateVacuum();
		updateMoisture();
	}
	
	/** 
		if the temperature in the tube is not stable i.e. is too high, stabilize it;
	*/
	action stabilize(){
		if currentTemp > Temperature.MAXIMUM_STABLE_TUBE_TEMP {
			currentTemp := Temperature.STABILIZED_TUBE_TEMP;
			send FreezerDryerTemp(currentTemp) to Channel.FREEZE_DRYER_SIMULATOR;
		}
	}
	
	action listenForProblems(){
		if currentMoisture <= FreezerDryer.MOISTURE_MINIMUM_TEMP_CELSIUS{
			send Alert(AlertType.MINIMUM_MOISTURE_REACHED) to Channel.FREEZE_DRYER_SIMULATOR;
		}	
		if currentTemp > Temperature.MAXIMUM_STABLE_TUBE_TEMP{
			send Alert(AlertType.HIGH_TUBE_HEAT) to Channel.FREEZE_DRYER_SIMULATOR;
		}		
	}
	
	action updateVacuum(){
		on all FreezerDryerVacuum() as fdv{
			currentVacuum := fdv.currentVacuum;
		}
	}
	
	action updateMoisture(){
		on all FreezerDryerMoisture() as fde{
			currentMoisture := fde.currentMoisture;
		}
	}
	
	action updateTemp(){
		on all FreezerDryerTemp() as fdm{
			currentTemp := fdm.currentTemp;
		}
	}
}


